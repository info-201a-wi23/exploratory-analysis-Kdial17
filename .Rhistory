<<<<<<< HEAD
# For fun, let's make a plot of avg viewers over season number
avg_viewers <- plot(survivor_df %>% group_by(season) %>% summarize(avg_viewers = mean(viewers, na.rm = TRUE)))
avg_viewers
avg_viewers
# For fun, let's make a plot of avg viewers over season number
avg_viewers <- plot(survivor_df %>% group_by(season) %>% summarize(mean_viewers = mean(viewers, na.rm = TRUE)))
avg_viewers
# For fun, let's make a plot of avg viewers over season number
avg_viewers <- plot(survivor_df %>% group_by(season) %>% summarize(mean_viewers = mean(viewers)))
avg_viewers
# For fun, let's make a plot of avg viewers over season number
plot(survivor_df %>% group_by(season) %>% summarize(avg_viewers = mean(viewers, na.rm = TRUE)))
avg_viewers
# Calculate the average number of viewers for each season `avg_viewers`
avg_viewers <- survivor_df %>% group_by(season) %>% summarize(mean_viewers = mean(viewers, na.rm = TRUE))
avg_viewers
# For fun, let's make a plot of avg viewers over season number
aplot(survivor_df %>% group_by(season) %>% summarize(mean_viewers = mean(viewers, na.rm = TRUE)))
# For fun, let's make a plot of avg viewers over season number
plot(survivor_df %>% group_by(season) %>% summarize(mean_viewers = mean(viewers, na.rm = TRUE)))
# Find the episode with the most number of viewers `most_views_row`
survivor_df %>% group_by(episode) %>% summarise(most_views_row = max(viewers, na.rm = TRUE))
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% group_by(episode) %>% summarise(most_views_row = max(viewers, na.rm = TRUE))
most_views_row
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers, type = 'b')
# For fun, let's make a plot of avg viewers over season number
plot(avg_viewers, type = "b")
most_views_row
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% group_by(episode) %>% summarize(most_views_row = max(viewers, na.rm = TRUE))
most_views_row
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% group_by(episode, viewers) %>% summarize(most_views_row = max(viewers, na.rm = TRUE))
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(episode))
most_views_row
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(episode, na.rm = TRUE))
most_views_row
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(episode, na.rm = TRUE))
View(most_views_row)
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(viewers, na.rm = TRUE))
most_views_row
# Find the episode with the most number of viewers `most_views_row`
most_views_row <- survivor_df %>% filter(viewers == max(viewers, na.rm = TRUE)) %>% pull(viewers)
# Find the episode with the most number of viewers, then pull the number of viewers and save it as a variable `most_views`
most_views <- survivor_df %>% filter(viewers == max(viewers, na.rm = TRUE)) %>% pull(viewers)
most_views
# Install package/data
install.packages("nycflights13")
# Load necessary libraries
library("nycflights13")
library("dplyr")
# Load dataframes
flights <- flights
airlines <- airlines
airports <- airports
View(airports)
View(flights)
View(airlines)
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(mean_delays = mean(dep_delay))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(mean_delays = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(mean_delays = mean(month, na.rm = TRUE))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(mean_delays = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create a scatterplot by passing that data frame to the built-in `plot()` function
plot(dep_delay_by_month, type = 'b')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = c'dest' = 'fest')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = c 'dest' = 'fest')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = c ('dest' = 'fest')
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = c ('dest' = 'fest'))
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = c ('dest' = 'fest'))
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = c ('dest' = 'carrier'))
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
left_join(flights, airlines, by = c('dest' = 'carrier'))
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
joined_df <- left_join(flights, airlines, by = c('dest' = 'carrier'))
joined_df
View(joined_df)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarize your data
dep_delay_by_month <- flights %>% group_by(month) %>% summarize(mean_dep_delays = mean(dep_delay, na.rm = TRUE))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
airlines %>% group_by(airlines) %>% summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
flights %>% group_by(airlines) %>% summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
flights %>% group_by(carrier) %>% summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
joined_df <- left_join(flights, airlines, by = c('dest', 'carrier'))
# Use `left_join()` to join the "flights" dataframe to the "airlines" dataframe, which has the airline information
joined_df <- left_join(flights, airlines, by = c('carrier'))
joined_df
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
flights %>% group_by(name) %>% summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
# What was the average departure delay for each airline?
# Hint: you'll have to perform a grouping operation then summarize your data
joined_df %>% group_by(name) %>% summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
airline_delays <- joined_df %>% group_by(name) %>% summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
airline_delays
read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
wa_data
# Load the state data as `states` from
# "https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv"
# Create a dataframe `wa_data` that is just data from Washington state
wa_data <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
wa_data
# Load the state data as `states` from
# "https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv"
# Create a dataframe `wa_data` that is just data from Washington state
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
states
View(states)
rm(wa_data)
# Create a dataframe `wa_data` that is just data from Washington state
library(stringr)
wa_data <- str_detect(states, "Washington")
wa_data <- str_detect(states, "Washington")
wa_data
wa_data <- states %>% filter(state == "Washington")
wa_data
# What are the total number of cases from Washington state by the most recent data? `total_cases`
total_cases <- wa_data %>% filter(date == max(date, na.rm = TRUE))
total_cases
# What are the total number of cases from Washington state by the most recent data? `total_cases`
total_cases <- wa_data %>% filter(date == max(date, na.rm = TRUE)) %>% pull(cases)
total_cases
# Create a `new_cases` column that has new number of new cases each day
new_cases <- states %>%
wa_data <- wa_data %>% mutate(new_cases = cases -lag(cases))
# Create a `new_cases` column that has new number of new cases each day
new_cases <- states %>%
wa_data <- wa_data %>% mutate(new_cases = cases - lag(cases))
# 1.a Load the tidyverse package and the dplyr package
library(tidyverse)
library(dplyr)
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = FALSE)
national
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
states
# 1.d Load the *county level* data from the following URL into a variable called `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv", stringsAsFactors = FALSE)
counties
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_national
obs_states <- nrow(states)
obs_states
obs_counties <- nrow(counties)
obs_counties
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_national
num_features_states <- ncol(states)
num_features_states
num_features_counties <- ncol(counties)
num_features_counties
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(cases == max(cases, na.rm = TRUE)) %>% pull(cases)
total_us_cases
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>% filter(deaths == max(deaths, na.rm = TRUE)) %>% pull(deaths)
total_us_deaths
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases <- states %>% filter(cases == max(cases, na.rm = TRUE)) %>% pull(state)
state_highest_cases
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>% filter(cases == max(cases, na.rm = TRUE)) %>% pull(cases)
num_highest_state
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `most_deaths`
states <- states %>% mutate(most_deaths = deaths/cases)
state_highest_ratio <- states %>% filter(most_deaths == max(most_deaths)) %>% pull(state)
state_highest_ratio
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter(cases == min(cases, na.rm = TRUE)) %>% filter(date == max(date)) %>% pull(state)
state_lowest_cases
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>% filter(cases == max(cases, na.rm = TRUE)) %>% pull(county)
county_highest_cases
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter(cases == max(cases, na.rm = TRUE)) %>% pull(cases)
num_highest_cases_county
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties <- counties %>% mutate(location = paste0(county, ", ", state))
counties
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% filter(cases == max(cases, na.rm = TRUE)) %>% pull(location)
location_most_deaths
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_cases = lag(national$cases))
national
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_deaths = lag(national$deaths))
national
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases, na.rm = TRUE)) %>% pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(deaths == max(new_deaths, na.rm = TRUE)) %>% pull(date)
date_most_deaths
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>% filter(deaths == max(new_deaths, na.rm = TRUE)) %>% pull(cases)
most_deaths
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
highest_cases_in_each_state <- counties %>% group_by(cases, location) %>% filter(cases == max(cases))
highest_cases_in_each_state
highest_cases_in_each_state <- counties %>% group_by(state, county) %>% filter(cases == max(cases))
highest_cases_in_each_state
highest_cases_in_each_state <- counties %>% group_by(location) %>% filter(cases == max(cases))
highest_cases_in_each_state
highest_cases_in_each_state <- counties %>% group_by(state, county) %>% filter(cases == max(cases, na.rm = TRUE))
highest_cases_in_each_state
highest_cases_in_each_state <- counties %>% group_by(state, county) %>% filter(cases = max(cases, na.rm = TRUE))
highest_cases_in_each_state <- counties %>% group_by(state, county) %>% filter(cases == max(cases, na.rm = TRUE))
highest_cases_in_each_state
View(counties)
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
# Load libraries
library("dplyr")
library("stringr")
library("ggplot2")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~/Desktop/info-201/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
View(spl_df)
# Exercise 2: We want to create a new date column ("date") with the month AND year and a default first day of the month
# Make a new column with checkout month, checkout year, and a default day value ("01") *pasted* together like so: 2020-10-01
# Then convert that column to a date value
spl_df <- spl_df %>% mutate(date = paste0(CheckoutYear, "-", CheckoutMonth, "-01"))
spl_df$date <- as.Date(spl_df$date, format = "%Y-%m-%d")
author_df <- spl_df %>% filter(str_detect(Creator, "(?!)Colleen Hoover"))
View(author_df)
author_df <- spl_df %>% filter(str_detect(Creator, "Colleen Hoover"))
author_df <- spl_df %>% filter(str_detect(Creator, "Rachel Renée Russell"))
checkouts_per_month <- spl_df %>% sum(group_by(date))
checkouts_per_month <- spl_df %>% group_by(date)
View(checkouts_per_month)
checkouts_per_month <- spl_df %>% group_by(CheckoutMonth)
author_df <- spl_df %>% filter(str_detect(Creator, "Rachel Renée Russell"))
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% summarize()
checkouts_per_month <- author_df %>% group_by(CheckoutMonth)
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% summarize(author_df == sum(Checkouts))
checkouts_per_month
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% summarize(author_df == length(sum(Checkouts)))
checkouts_per_month
source("~/Desktop/info-201/Getting-Started-with-A3-SPL-Data.R", echo=TRUE)
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% summarize(author_df == length(sum(Checkouts)))
checkouts_per_month
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) sum(checkouts_per_month)
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% sum(checkouts_per_month)
sum(checkouts_per_month)
checkouts_per_month <- author_df %>% group_by(CheckoutMonth)
sum(checkouts_per_month)
sum(checkouts_per_month)
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% filter(Checkouts == sum(Checkouts))
checkouts_per_month
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% filter(Checkouts == sum(Checkouts, na.rm = T))
checkouts_per_month
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% summarize(total_checkouts = sum(Checkouts, na.rm = TRUE))
checkouts_per_month
ggplot(data = checkouts_per_month) +
geom_point(mapping = aes(x = CheckoutMonth, y = total_checkouts, color = CheckoutMonth))
geom_line(mapping = aes(x = CheckoutMonth, y = total_checkouts, color = CheckoutMonth)
ggplot(data = checkouts_per_month) +
ggplot(data = checkouts_per_month) +
geom_point(mapping = aes(x = CheckoutMonth, y = total_checkouts, color = CheckoutMonth)) +
geom_line(mapping = aes(x = CheckoutMonth, y = total_checkouts, color = CheckoutMonth))
ggplot(data = checkouts_per_month) +
geom_point(mapping = aes(x = Year, y = total_checkouts, color = CheckoutMonth)) +
geom_line(mapping = aes(x = Year, y = total_checkouts, color = CheckoutMonth))
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = checkouts_per_month, color = CheckoutMonth))
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts, color = CheckoutMonth))
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts, color = CheckoutMonth)) +
scale_y_continous(labels = label_number_si())
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts, color = CheckoutMonth)) +
scale_y_continous(labels = label_number_si())
library("scale")
library("scales")
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts, color = CheckoutMonth)) +
scale_y_continous(labels = label_number_si())
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts, color = CheckoutMonth)) +
scale_color_brewer(palette = "Accent") +
labs(title = "X")
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts, color = CheckoutMonth)) +
scale_color_brewer(palette = "Accent") +
labs(title = "X")
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts, color = CheckoutMonth)) +
scale_color_brewer(palette = "Accent") +
labs(title = "X")
geom_line(mapping = aes(x = date, y = Checkouts) +
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "X")
ggplot(data = author_df) +
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
ggplot(data = author_df) +
geom_smooth(mapping = aes(x = date, y = Checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
author_df <- spl_df %>% filter(str_detect(Creator, "Colleen Hoover"))
author_df
checkouts_per_month <- author_df %>% group_by(CheckoutMonth) %>% summarize(total_checkouts = sum(Checkouts, na.rm = TRUE))
checkouts_per_month
ggplot(data = author_df) +
geom_(mapping = aes(x = date, y = Checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
ggplot(data = author_df) +
geom_(mapping = aes(x = date, y = Checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = Checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
ggplot(data = author_df) +
geom_line(mapping = aes(x = date, y = checkouts_per_month)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
checkouts_per_month <- author_df %>% group_by(CheckoutMonth, date) %>% summarize(total_checkouts = sum(Checkouts, na.rm = TRUE))
ggplot(data = checkouts_per_month) +
geom_line(mapping = aes(x = date, y = checkouts_per_month)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
ggplot(data = checkouts_per_month) +
geom_line(mapping = aes(x = date, y = total_checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "xxx")
ggplot(data = checkouts_per_month) +
geom_line(mapping = aes(x = date, y = total_checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "Colleen Hoover Checkouts on the Rise")
ggplot(data = checkouts_per_month) +
geom_line(mapping = aes(x = date, y = total_checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "Colleen Hoover Checkouts on the Rise", x = "Date", y = "Total Checkouts")
ggplot(data = checkouts_per_month) +
geom_line(mapping = aes(x = date, y = total_checkouts)) +
scale_color_brewer(palette = "Accent") +
labs(title = "Colleen Hoover Checkouts on the Rise", x = "Month", y = "Total Checkouts")
ggplot(data = data) +
geom_line(aes(x = FOCV, y = GAD_G))
library(ggplot2)
library(dplyr)
library(stringr)
library(scales)
data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv(~/Desktop/info-201/exploratory-analysis-Kdial17/"Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv(~/Desktop/info-201/exploratory-analysis-Kdial17/"Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv(~Desktop/info-201/exploratory-analysis-Kdial17/"Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv(~/Desktop/info-201/exploratory-analysis-Kdial7/"Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv(/info-201/exploratory-analysis-Kdial7/"Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(scales)
mh_data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
ggplot(data = mh_data) +
geom_smooth(aes(x = FOCV, y = GAD_G)) +
labs(x = "Fear of Covid (FoCV-19S Score)",
y = "Anxiety Severity (GAD_7 Score)",
title = "Anxiety Rates Increasing as the Fear of Covid Increases") +
scale_y_continuous(breaks = seq(0, 21, 3)) +
scale_x_continuous(breaks = seq(0, 35, 5))
mh_data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
setwd("/Users/khadija/Desktop/info-201/exploratory-analysis-Kdial17")
mh_data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
ggplot(data = mh_data) +
geom_smooth(aes(x = FOCV, y = GAD_G)) +
labs(x = "Fear of Covid (FoCV-19S Score)",
y = "Anxiety Severity (GAD_7 Score)",
title = "Anxiety Rates Increasing as the Fear of Covid Increases") +
scale_y_continuous(breaks = seq(0, 21, 3)) +
scale_x_continuous(breaks = seq(0, 35, 5))
library(ggplot2)
library(dplyr)
library(scales)
mh_data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
ggplot(data = mh_data) +
geom_smooth(aes(x = FOCV, y = GAD_G)) +
labs(x = "Fear of Covid (FoCV-19S Score)",
y = "Anxiety Severity (GAD-7 Score)",
title = "Anxiety Rates Increasing as the Fear of Covid Increases") +
scale_y_continuous(breaks = seq(0, 21, 3)) +
scale_x_continuous(breaks = seq(0, 35, 5))
### Chart 3
``````{r, echo = FALSE, code = readLines("chart_3.r")}
### Chart 3
``````{r, echo = FALSE, code = readLines("chart_3.r")}
library(ggplot2)
library(dplyr)
library(scales)
mh_data <- read.csv("Mental-Health-With-College-Students.csv", stringsAsFactors = FALSE)
ggplot(data = mh_data) +
geom_smooth(aes(x = FOCV, y = GAD_G)) +
labs(x = "Fear of Covid (FoCV-19S Score)",
y = "Anxiety Severity (GAD-7 Score)",
title = "Anxiety Rates Increasing as the Fear of Covid Increases") +
scale_y_continuous(breaks = seq(0, 21, 3)) +
scale_x_continuous(breaks = seq(0, 35, 5))
Mental_Health_Dataset <- read.csv("https://raw.githubusercontent.com/info-201a-wi23/exploratory-analysis-Kdial17/main/Mental-Health-With-College-Students.csv")
ggplot(data = Mental_Health_Dataset, aes(x = Age, y = SWLS_1,SWLS_2,SWLS_3,SWLS_4,SWLS_5,SWLS_G)) +
geom_col(color = "blue", shape = 16, size = 1) +
labs(x = "Age", y = "Life Satisfaction") +
ggtitle("Relationship between Age and Life Satisfaction During the 4th Wave of the Pandemic");
library("dplyr")
library(ggplot2)
library("dplyr")
library("dplyr")
Mental_Health_Dataset <- read.csv("https://raw.githubusercontent.com/info-201a-wi23/exploratory-analysis-Kdial17/main/Mental-Health-With-College-Students.csv")
ggplot(data = Mental_Health_Dataset, aes(x = Age, y = SWLS_1,SWLS_2,SWLS_3,SWLS_4,SWLS_5,SWLS_G)) +
geom_col(color = "blue", shape = 16, size = 1) +
labs(x = "Age", y = "Life Satisfaction") +
ggtitle("Relationship between Age and Life Satisfaction During the 4th Wave of the Pandemic");
library("dplyr")
library("ggplot2")
Mental_Health_Dataset <- read.csv("https://raw.githubusercontent.com/info-201a-wi23/exploratory-analysis-Kdial17/main/Mental-Health-With-College-Students.csv")
ggplot(data = Mental_Health_Dataset, aes(x = Age, y = SWLS_1,SWLS_2,SWLS_3,SWLS_4,SWLS_5,SWLS_G)) +
geom_col(color = "blue", shape = 16, size = 1) +
labs(x = "Age", y = "Life Satisfaction") +
ggtitle("Relationship between Age and Life Satisfaction During the 4th Wave of the Pandemic");
install.packages('plyr', repos = "http://cran.us.r-project.org")
install.packages("tidyverse", repos = "http://cran.us.r-project.org)
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
library("dplyr")
ggplot(data = Mental_Health_Dataset, aes(x = Age, y = SWLS_1,SWLS_2,SWLS_3,SWLS_4,SWLS_5,SWLS_G)) +
geom_col(color = "blue", shape = 16, size = 1) +
labs(x = "Age", y = "Life Satisfaction") +
ggtitle("Relationship between Age and Life Satisfaction During the 4th Wave of the Pandemic");
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
=======
install.packages("tidyverse")
library("dplyr")
Mental_Health_Dataset <- read.csv("https://raw.githubusercontent.com/info-201a-wi23/exploratory-analysis-Kdial17/main/Mental-Health-With-College-Students.csv")
>>>>>>> 9df119843aa5e1865ac46e6c68ab81719b0ec162
ggplot(data = Mental_Health_Dataset, aes(x = Relationships, y = SWLS_1,SWLS_2,SWLS_3,SWLS_4,SWLS_5,SWLS_G)) +
geom_col(color = "blue", shape = 10, size = 1) +
labs(x = "Relationship Status", y = "Life Satisfaction") +
ggtitle("Relationship between Relationship Status and Life Satisfaction During the 4th Wave of the Pandemic");
<<<<<<< HEAD
ggplot(data = Mental_Health_Dataset, aes(x = Age, y = SWLS_1,SWLS_2,SWLS_3,SWLS_4,SWLS_5,SWLS_G)) +
geom_col(color = "blue", shape = 16, size = 1) +
labs(x = "Age", y = "Life Satisfaction") +
ggtitle("Relationship between Age and Life Satisfaction During the 4th Wave of the Pandemic");
=======
View(Mental_Health_Dataset)
ggplot(data = Mental_Health_Dataset, aes(x = Relationships, y = SWLS_1,SWLS_2,SWLS_3,SWLS_4,SWLS_5,SWLS_G)) +
geom_col(color = "blue", shape = 10, size = 1) +
labs(x = "Relationship Status", y = "Life Satisfaction") +
ggtitle("Relationship between Relationship Status and Life Satisfaction During the 4th Wave of the Pandemic");
install.packages("rmarkdown")
>>>>>>> 9df119843aa5e1865ac46e6c68ab81719b0ec162
